<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[双向绑定实现]]></title>
      <url>http://yuliangyang1.github.io/2016/11/15/%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9ADemo/</url>
      <content type="html"><![CDATA[<h2 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h2><ul>
<li><code>值和UI双绑定</code><ul>
<li>各种数据相互依赖相互绑定</li>
<li>数据问题的源头难以被跟踪到</li>
</ul>
</li>
</ul>
<h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><ol>
<li>订阅发布模式。</li>
<li>数据劫持。</li>
</ol>
<h3 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h3><ol>
<li>实现⼀一个数据监听器<code>Observer</code></li>
<li>实现⼀一个指令解析器<code>Compile</code></li>
<li>实现一个<code>Watcher</code> </li>
<li><code>MVVM</code>⼊入⼜⼝口函数</li>
</ol>
<h3 id="Observer"><a href="#Observer" class="headerlink" title="Observer"></a>Observer</h3><p>用于定义属性，将属性定义在定义在<code>Object.defineProperty()</code>中这是实现双向绑定的核心函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">  Observer.prototype = &#123;</div><div class="line">    .....</div><div class="line">    defineReactive: <span class="function"><span class="keyword">function</span>(<span class="params">data, key, val</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> dep = <span class="keyword">new</span> Dep();</div><div class="line">        <span class="keyword">var</span> childObj = observe(val);</div><div class="line"></div><div class="line">        <span class="built_in">Object</span>.defineProperty(data, key, &#123;</div><div class="line">            <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="comment">// 可枚举，为了能再for循环中使用</span></div><div class="line">            configurable: <span class="literal">false</span>, <span class="comment">// 不能再被重复define</span></div><div class="line">            get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (Dep.target) &#123;</div><div class="line">                    dep.depend();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> val;</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">set</span>: <span class="function"><span class="keyword">function</span>(<span class="params">newVal</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (newVal === val) &#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                val = newVal;</div><div class="line">                <span class="comment">// 新的值是object的话，进行监听</span></div><div class="line">                childObj = observe(newVal);</div><div class="line">                <span class="comment">// 通知订阅者</span></div><div class="line">                dep.notify();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="Compile"><a href="#Compile" class="headerlink" title="Compile"></a>Compile</h3><p>用于编译指令，绑定监听者，识别关键的标签，比如<code>v-html</code>等<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">  Compile.prototype = &#123;</div><div class="line">    <span class="attr">node2Fragment</span>: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> fragment = <span class="built_in">document</span>.createDocumentFragment(),</div><div class="line">            child;</div><div class="line">        <span class="comment">// 将原生节点拷贝到fragment</span></div><div class="line">        <span class="keyword">while</span> (child = el.firstChild) &#123;</div><div class="line">            fragment.appendChild(child);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> fragment;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">init</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.compileElement(<span class="keyword">this</span>.$fragment);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">compileElement</span>: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> childNodes = el.childNodes,</div><div class="line">            me = <span class="keyword">this</span>;</div><div class="line">        [].slice.call(childNodes).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> text = node.textContent;</div><div class="line">            <span class="keyword">var</span> reg = <span class="regexp">/\&#123;\&#123;(.*)\&#125;\&#125;/</span>;</div><div class="line">            <span class="keyword">if</span> (me.isElementNode(node)) &#123;</div><div class="line">                me.compile(node);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (me.isTextNode(node) &amp;&amp; reg.test(text)) &#123;</div><div class="line">                me.compileText(node, <span class="built_in">RegExp</span>.$<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (node.childNodes &amp;&amp; node.childNodes.length) &#123;</div><div class="line">                me.compileElement(node);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">compile</span>: <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> nodeAttrs = node.attributes,</div><div class="line">            me = <span class="keyword">this</span>;</div><div class="line">        [].slice.call(nodeAttrs).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">attr</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> attrName = attr.name;</div><div class="line">            <span class="keyword">if</span> (me.isDirective(attrName)) &#123;</div><div class="line">                <span class="keyword">var</span> exp = attr.value;</div><div class="line">                <span class="keyword">var</span> dir = attrName.substring(<span class="number">2</span>);<span class="comment">//d-***</span></div><div class="line">                <span class="comment">// 事件指令</span></div><div class="line">                <span class="keyword">if</span> (me.isEventDirective(dir)) &#123;</div><div class="line">                    compileUtil.eventHandler(node, me.$vm, exp, dir);</div><div class="line">                    <span class="comment">// 普通指令</span></div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    compileUtil[dir] &amp;&amp; compileUtil[dir](node, me.$vm, exp);</div><div class="line">                &#125;</div><div class="line">                node.removeAttribute(attrName);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">compileText</span>: <span class="function"><span class="keyword">function</span>(<span class="params">node, exp</span>) </span>&#123;</div><div class="line">        compileUtil.text(node, <span class="keyword">this</span>.$vm, exp);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">isDirective</span>: <span class="function"><span class="keyword">function</span>(<span class="params">attr</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> attr.indexOf(<span class="string">'d-'</span>) == <span class="number">0</span>;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">isEventDirective</span>: <span class="function"><span class="keyword">function</span>(<span class="params">dir</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> dir.indexOf(<span class="string">'on'</span>) === <span class="number">0</span>;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">isElementNode</span>: <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> node.nodeType == <span class="number">1</span>;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">isTextNode</span>: <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> node.nodeType == <span class="number">3</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="Watcher"><a href="#Watcher" class="headerlink" title="Watcher"></a>Watcher</h3><p>监听者，放于监听器上，执行相应的回调函数，是<code>Observer</code>和<code>Compile</code>之间的桥梁<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Watcher</span>(<span class="params">vm, exp, cb</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.cb = cb;</div><div class="line">    <span class="keyword">this</span>.vm = vm;</div><div class="line">    <span class="keyword">this</span>.exp = exp;</div><div class="line">    <span class="keyword">this</span>.depIds = &#123;&#125;;</div><div class="line">    <span class="keyword">this</span>.value = <span class="keyword">this</span>.get();</div><div class="line">&#125;</div><div class="line">Watcher.prototype = &#123;</div><div class="line">    <span class="attr">update</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.run();</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">run</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> value = <span class="keyword">this</span>.get();<span class="comment">//触发observer中object.defineProperty中的get方法</span></div><div class="line">        <span class="keyword">var</span> oldVal = <span class="keyword">this</span>.value;</div><div class="line">        <span class="keyword">if</span> (value !== oldVal) &#123;</div><div class="line">            <span class="keyword">this</span>.value = value;</div><div class="line">            <span class="keyword">this</span>.cb.call(<span class="keyword">this</span>.vm, value, oldVal);</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">addDep</span>: <span class="function"><span class="keyword">function</span>(<span class="params">dep</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.depIds.hasOwnProperty(dep.id)) &#123;</div><div class="line">            dep.addSub(<span class="keyword">this</span>);</div><div class="line">            <span class="keyword">this</span>.depIds[dep.id] = dep;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        Dep.target = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">var</span> value = <span class="keyword">this</span>.getVMVal();<span class="comment">//默默的调用observe中的get方法</span></div><div class="line">        Dep.target = <span class="literal">null</span>;</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">getVMVal</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> exp = <span class="keyword">this</span>.exp.split(<span class="string">'.'</span>);</div><div class="line">        <span class="keyword">var</span> val = <span class="keyword">this</span>.vm._data;</div><div class="line">        exp.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">k</span>) </span>&#123;</div><div class="line">            val = val[k];<span class="comment">//触发observer中的get方法</span></div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">return</span> val;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>在进行angularjs进行脏数据查询，触发事件的时候进行事件的轮训，digest是轮训的中心方法。</li>
<li>vuejs是触发get和set方法来执行相应的监听数组。（针对性比较强）</li>
</ol>
<ul>
<li><a href="https://github.com/yuliangyang1/vm" target="_blank" rel="external">demo</a>  </li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[编写高效的javascript]]></title>
      <url>http://yuliangyang1.github.io/2016/08/29/%E7%BC%96%E5%86%99%E9%AB%98%E6%95%88%E7%9A%84javascript/</url>
      <content type="html"><![CDATA[<h1 id="读书笔记"><a href="#读书笔记" class="headerlink" title="读书笔记"></a>读书笔记</h1><ol>
<li>当执行javascript代码时，javascript引擎会创建一个执行上下文。执行上下文设定了代码执行时所处的环境。javascript引擎会在页面加载后创建一个全局执行上下文，然后每执行一个函数都会创建一个对应的执行上下文，最终建立一个执行上下文的堆栈，当前起作用的执行上下文在堆栈的最顶部。</li>
<li>使用局部变量：这样使得在使用变量的适合能够再堆栈的顶部找到变量，而不需要增加在作用域链中查找的时间。</li>
<li>使用with会加深作用域链，建议不使用。</li>
<li>try-catch也会加深作用域链，因为在catch块中会在作用域的顶部加了一个异常的对象，但是是在发生错误的时候才执行，所以它比with语句的影响要小。</li>
<li>数据在脚本中存储的位置直接影响脚本执行的总耗时，脚本中有四种地方可以存取数据<br>a.字面量值<br>b.变量<br>c.数组元素<br>d.对象属性</li>
<li>控制流，流控制是提升javascript性能最重要的一环，用switch语句简化了多重条件判断的结构，并且提升性能,避免使用for-in循环，它用来遍历javascript对象的可枚举属性。</li>
<li>字符串优化：字符串的连接应该避免使用加法运算符（+）来完成，然后我们使用javascript的Array对象有一个join方法，用来连接数组中的所有元素并且在元素之间插入指定的字符串。开发者把字符串添加到数组中然后通过join方法来连接字符串，这样就避免了使用加法运算符。</li>
<li>避免运行时间过长的脚本<br>a.过多的DOM操作。<br>b.过多的循环。<br>c.过多的递归。</li>
<li>使用定时器挂起，使用setTimeout函数传递需要执行的函数及延迟执行该函数的时间，延迟执行脚本的时间。</li>
</ol>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ol>
<li>管理作用域非常重要，因为存取非局部变量比局部变量耗时更多。</li>
<li>存储和读取数据的方式对脚本性能影响极大。</li>
<li>控制流也是影响脚本执行速度的一个重要因素。</li>
<li>在javascript中循环经常会成为性能瓶颈。</li>
<li>谨慎使用HTMLCollection对象。</li>
<li>常见的字符串操作可能会带来意料之外的性能问题。</li>
<li>浏览器会限制Javascript可以运行的最长时间，有些会执行语句的数量作为判断条件，有些则会控制javascript引擎执行的总时间。</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Elements调试的秘密]]></title>
      <url>http://yuliangyang1.github.io/2016/08/28/Elements%E8%B0%83%E8%AF%95%E7%9A%84%E7%A7%98%E5%AF%86/</url>
      <content type="html"><![CDATA[<h1 id="最近在进行模板的开发，多chrome浏览器的elements元素使用的频率较多，对自己用到的功能模块和使用的技巧进行总结"><a href="#最近在进行模板的开发，多chrome浏览器的elements元素使用的频率较多，对自己用到的功能模块和使用的技巧进行总结" class="headerlink" title="最近在进行模板的开发，多chrome浏览器的elements元素使用的频率较多，对自己用到的功能模块和使用的技巧进行总结"></a>最近在进行模板的开发，多chrome浏览器的elements元素使用的频率较多，对自己用到的功能模块和使用的技巧进行总结</h1><h2 id="Elememts-画板"><a href="#Elememts-画板" class="headerlink" title="Elememts 画板"></a>Elememts 画板</h2><p>打开Element面板，可以查看所有DOM节点，包括CSS和JavaScript，如下图所示，左侧为DOM树，右侧为CSS样式。这个选项是所有Dom元素节点的样式具体展示。</p>
<p>1.鼠标选中节点，这时会发现Elements面板中的DOM树发生变化：<br>选中的的节点在DOM树中被精确定位（蓝色背景），可以看到被选中节点的DOM层次（红色方框），在面板右侧，是选中节点的CSS样式。</p>
<p>2.增加、删除和修改DOM节点<br>Edit text（编辑文本）：编辑该节点中的文本。也可以在文本处双击进行编辑。<br>Edit as HTML（编辑HTML）：编辑该节点及其子节点的所有HTML元素（包括节点中的文本）。<br>Copy as HTML（复制HTML）：复制该节点及其子节点的所有HTML元素（HTML文档）。<br>Copy XPath（复制XPath路径）：复制该节点的XPath路径，即DOM层次路径。例如，选中的节点的XPath路径为 /html/body/div/p 。<br>Delete node（删除节点）：删除该节点及其子节点的所有HTML元素。也可以使用 Backspace 和 Delete 键删除。<br>Inspect DOM properties（审查DOM属性）：在控制台中显示该节点的所有标准属性（如果有的话）。<br>Word wrap（自动换行）：HTML代码是否自动换行。</p>
<p>对 Inspect DOM properties（审查DOM属性）的说明：<br>为节点添加id属性。<br>会在控制台输出p#demo；再向节点添加class属性和name属性。<br>会在控制台输出p#demo.demo。<br>可见，控制台只会输出符合W3C标准的属性，不支持自定义属性。不过，实际开发中很少用到该功能。<br>另外，我们也可以通过拖动节点来改变节点的顺序，双击属性节点来改变它的值。</p>
<h2 id="查看css样式"><a href="#查看css样式" class="headerlink" title="查看css样式"></a>查看css样式</h2><p>CSS样式审查面板是一个非常有用的面板，实际开发中，有时候CSS样式表会非常复杂，甚至连我们自己都不知道当前节点应用了哪些样式。使用CSS样式审查面板，可以让我们清楚地知道当前节点使用了哪些样式，分别来自哪些文件，哪些样式是被覆盖的，哪些样式是最终样式，哪些样式是无效的，等等。<br>在CSS样式审查面板中，我们可以添加、删除和修改CSS样式。</p>
<p>子面板说明：</p>
<ol>
<li>Style（样式）：当前节点的样式；</li>
<li>Computed（计算）：查看当前节点经过计算后的样式以及盒模型数据；</li>
<li>Event Listeners（事件监听）：查看为当前节点绑定的事件和事件监听函数；</li>
<li>DOM Breakpoints（DOM断点）：查看为当前节点设置的DOM断点；</li>
<li>Properties（属性）：当前节点（对象）的所有属性。</li>
</ol>
<h3 id="【小技巧】使用键盘方向键改变数值"><a href="#【小技巧】使用键盘方向键改变数值" class="headerlink" title="【小技巧】使用键盘方向键改变数值"></a>【小技巧】使用键盘方向键改变数值</h3><p>查看节点的样式，选中 padding 的值，按下键盘方向键（&lt;- 和 -&gt;）数值会跟着改变，页面上节点的样式也立刻改变。实际开发中，会经常使用该方法来微调元素的外边距、内补白和大小等、，非常方便。</p>
<h3 id="【小技巧】颜色拾取器"><a href="#【小技巧】颜色拾取器" class="headerlink" title="【小技巧】颜色拾取器"></a>【小技巧】颜色拾取器</h3><p>查看节点的样式,选中 background-color 后边的小图标，会弹出颜色拾取器，能够很方便的改变背景颜色。</p>
<h3 id="【小技巧】新增样式类的使用"><a href="#【小技巧】新增样式类的使用" class="headerlink" title="【小技巧】新增样式类的使用"></a>【小技巧】新增样式类的使用</h3><p>在新增样式节点的时候，可以自己添加自己的伪类：比如before，after等处理。</p>
<h3 id="【小技巧】animate-的使用"><a href="#【小技巧】animate-的使用" class="headerlink" title="【小技巧】animate 的使用"></a>【小技巧】animate 的使用</h3><p>在进行动画效果的设计的时候，可以定位到不同的百分位进行动画效果样式的编写。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[css兼容性的处理]]></title>
      <url>http://yuliangyang1.github.io/2016/08/18/css%E5%85%BC%E5%AE%B9%E6%80%A7%E7%9A%84%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="在android4-0系列的手机上回出现层级上（z-index）的渲染效果的差异。"><a href="#在android4-0系列的手机上回出现层级上（z-index）的渲染效果的差异。" class="headerlink" title="在android4.0系列的手机上回出现层级上（z-index）的渲染效果的差异。"></a>在android4.0系列的手机上回出现层级上（z-index）的渲染效果的差异。</h2><p>原因：手机内核解析的差异，层级严格划分<br>解决办法：使用在：position :absolute的元素<br>     -webkit-transform:translateZ(0);</p>
<h2 id="android内核3-4-67版本的手机会出现绝对定位的位置问题"><a href="#android内核3-4-67版本的手机会出现绝对定位的位置问题" class="headerlink" title="android内核3.4.67版本的手机会出现绝对定位的位置问题"></a>android内核3.4.67版本的手机会出现绝对定位的位置问题</h2><p>原因：特殊属性，需要特殊处理<br>解决办法：需要多加定位坐标，或者加“-webkit-”前缀</p>
<h2 id="在三星9300（android4-0系列）手机进行列表适配的时候，div外层的height会崩塌，是因为内层存在绝对定位的元素。"><a href="#在三星9300（android4-0系列）手机进行列表适配的时候，div外层的height会崩塌，是因为内层存在绝对定位的元素。" class="headerlink" title="在三星9300（android4.0系列）手机进行列表适配的时候，div外层的height会崩塌，是因为内层存在绝对定位的元素。"></a>在三星9300（android4.0系列）手机进行列表适配的时候，div外层的height会崩塌，是因为内层存在绝对定位的元素。</h2><p>原因：父层元素会因为子元素的绝对定位而出现高度坍塌的显现。<br>解决办法：需要去掉外层div固定的高度，或者清除浮动。</p>
<h2 id="在三星9300（android4-0系列）的手机在itemList模块在样式中使用calc属性计算，会出现机器适配的问题。"><a href="#在三星9300（android4-0系列）的手机在itemList模块在样式中使用calc属性计算，会出现机器适配的问题。" class="headerlink" title="在三星9300（android4.0系列）的手机在itemList模块在样式中使用calc属性计算，会出现机器适配的问题。"></a>在三星9300（android4.0系列）的手机在itemList模块在样式中使用calc属性计算，会出现机器适配的问题。</h2><p>原因：属性不兼容。<br>解决办法：calc属性，android4.4以上设备，改换成百分百的适配方式。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://yuliangyang1.github.io/2016/08/17/hello-world/</url>
      <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
