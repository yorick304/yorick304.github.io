<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yorick</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yuliangyang1.github.io/"/>
  <updated>2018-08-09T11:09:53.000Z</updated>
  <id>http://yuliangyang1.github.io/</id>
  
  <author>
    <name>Yorick</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>全球公认最健康的作息时间表 </title>
    <link href="http://yuliangyang1.github.io/2018/08/09/%E5%85%A8%E7%90%83%E5%85%AC%E8%AE%A4%E6%9C%80%E5%81%A5%E5%BA%B7%E7%9A%84%E4%BD%9C%E6%81%AF%E6%97%B6%E9%97%B4%E8%A1%A8/"/>
    <id>http://yuliangyang1.github.io/2018/08/09/全球公认最健康的作息时间表/</id>
    <published>2018-08-09T10:49:13.000Z</published>
    <updated>2018-08-09T11:09:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="你的作息健康吗？"><a href="#你的作息健康吗？" class="headerlink" title="你的作息健康吗？"></a>你的作息健康吗？</h1><p>年轻可不是挥霍的资本，身体是革命的本钱！科学合理的作息为了拥有更好的明天，这里有全球公认最健康的作息时间表，赶紧收藏吧～</p>
<h2 id="7-00-迎着清晨的阳光起床"><a href="#7-00-迎着清晨的阳光起床" class="headerlink" title="7:00 迎着清晨的阳光起床"></a>7:00 迎着清晨的阳光起床</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">一杯温水是早起之后的必需品，能让你获得一天最好的开始。</div></pre></td></tr></table></figure>
<h2 id="7-20-8-00-营养全面的早餐"><a href="#7-20-8-00-营养全面的早餐" class="headerlink" title="7:20-8:00 营养全面的早餐"></a>7:20-8:00 营养全面的早餐</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">一顿优质的早餐，能让你一整天都充满活力。</div></pre></td></tr></table></figure>
<h2 id="8-30-9-00-避免激烈运动"><a href="#8-30-9-00-避免激烈运动" class="headerlink" title="8:30-9:00 避免激烈运动"></a>8:30-9:00 避免激烈运动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">早上是人体免疫系统最弱的时候，不要做剧烈的运动，走路上班是很好的选择，健康又惬意。</div></pre></td></tr></table></figure>
<h2 id="9-00-10-00-做困难性工作"><a href="#9-00-10-00-做困难性工作" class="headerlink" title="9:00-10:00 做困难性工作"></a>9:00-10:00 做困难性工作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">上午，人脑最清醒犀利，应该用来做最有难度的事。比如攻克工作的难题，给复杂的报告列提纲等等，充分利用好上午清醒的大脑。</div></pre></td></tr></table></figure>
<h2 id="0-30-让眼睛休息一下"><a href="#0-30-让眼睛休息一下" class="headerlink" title="0:30 让眼睛休息一下"></a>0:30 让眼睛休息一下</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">一晃就十点半了，起来走动走动，眺望一下远方，做一做眼保健操，让眼睛舒缓舒缓。</div></pre></td></tr></table></figure>
<h2 id="11-00-吃点水果"><a href="#11-00-吃点水果" class="headerlink" title="11:00 吃点水果"></a>11:00 吃点水果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">上午工作得差不多了，该吃点水果了。上午是一天吃水果的最佳时机，因为上午人体最适合吸收水果里的营养。</div></pre></td></tr></table></figure>
<h2 id="12-00-12-30-午餐"><a href="#12-00-12-30-午餐" class="headerlink" title="12:00-12:30 午餐"></a>12:00-12:30 午餐</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">午餐要吃饱，中午应该补充足够的蛋白质，豆类食品是最佳选择。虽然是午饭，久坐办公室的人也不要吃得太油腻。</div></pre></td></tr></table></figure>
<h2 id="13-00-14-00-午睡"><a href="#13-00-14-00-午睡" class="headerlink" title="13:00-14:00 午睡"></a>13:00-14:00 午睡</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">午饭后的时间很宝贵，最好用来小睡一觉。有的人喜欢在中午网上购物或者是打激烈的游戏，这反而会让大脑处于过度紧张的状态，造成下午身体的疲惫。</div></pre></td></tr></table></figure>
<h2 id="14-00-16-00-做创意性工作"><a href="#14-00-16-00-做创意性工作" class="headerlink" title="14:00-16:00 做创意性工作"></a>14:00-16:00 做创意性工作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">午后是人思维最活跃的时间，非常适合做一些创意性的工作。想一想工作中的创新，即使是微小的改善，日积月累也会有巨大的成就。</div></pre></td></tr></table></figure>
<h2 id="16-00-喝杯酸奶"><a href="#16-00-喝杯酸奶" class="headerlink" title="16:00 喝杯酸奶"></a>16:00 喝杯酸奶</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">四点左右，喝杯酸奶，能补充身体流失的血糖，而后将要投入到一天最密集的工作中了。</div></pre></td></tr></table></figure>
<h2 id="16-10-19-00-做细致性工作"><a href="#16-10-19-00-做细致性工作" class="headerlink" title="16:10-19:00 做细致性工作"></a>16:10-19:00 做细致性工作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">四点到七点，身体和大脑都处于一天的巅峰状态，这时候我们应该做细致而密集的工作。</div></pre></td></tr></table></figure>
<h2 id="19-00-最佳的运动时间"><a href="#19-00-最佳的运动时间" class="headerlink" title="19:00 最佳的运动时间"></a>19:00 最佳的运动时间</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">下班之后稍微吃点东西，晚饭不要吃太多，三分饱即可。晚饭后稍微歇一会儿再开始运动。先散步，再慢跑，是非常健康的运动方式。</div></pre></td></tr></table></figure>
<h2 id="20-00-看电视或书"><a href="#20-00-看电视或书" class="headerlink" title="20:00 看电视或书"></a>20:00 看电视或书</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">运动之后可以看看电视，或打开你阅读计划中的书放松阅读。最好的选择还是在娱乐休闲中延绵不绝地思考工作，这样会碰撞出意想不到的火花。</div></pre></td></tr></table></figure>
<h2 id="22-00-洗个热水澡"><a href="#22-00-洗个热水澡" class="headerlink" title="22:00 洗个热水澡"></a>22:00 洗个热水澡</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">时间差不多就该洗个澡了，让身体彻底舒缓下来，洗去一天的疲惫。</div></pre></td></tr></table></figure>
<h2 id="22-30-上床睡觉"><a href="#22-30-上床睡觉" class="headerlink" title="22:30 上床睡觉"></a>22:30 上床睡觉</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">十一点，人体的各个器官都开始处于休息期了，不要违背身体的自然规律，放松睡一个好觉，明天又是美好的一天！</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;你的作息健康吗？&quot;&gt;&lt;a href=&quot;#你的作息健康吗？&quot; class=&quot;headerlink&quot; title=&quot;你的作息健康吗？&quot;&gt;&lt;/a&gt;你的作息健康吗？&lt;/h1&gt;&lt;p&gt;年轻可不是挥霍的资本，身体是革命的本钱！科学合理的作息为了拥有更好的明天，这里有全球公认最健
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>router_learn</title>
    <link href="http://yuliangyang1.github.io/2017/10/01/router-learn/"/>
    <id>http://yuliangyang1.github.io/2017/10/01/router-learn/</id>
    <published>2017-10-01T02:12:30.000Z</published>
    <updated>2017-10-01T02:24:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LEARN-SOURCE"><a href="#LEARN-SOURCE" class="headerlink" title="LEARN SOURCE"></a>LEARN SOURCE</h1><p>各种五花八门的框架，在前端大浪潮的背景下脱颖而出，SPA的概念更是深入人心，体验的优化，必然是每一位开发者必须考虑的事情。带着求知的欲望和好奇，对路由的原理进行了剖析，学习其中的原理，并且和后端的路由机制进行了对比。没有对比就木有伤害，在对比中学习。站在巨人的肩膀上思考问题。</p>
]]></content>
    
    <summary type="html">
    
      路由原理学习
    
    </summary>
    
    
      <category term="javascript" scheme="http://yuliangyang1.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>vue颜色选择器</title>
    <link href="http://yuliangyang1.github.io/2017/04/23/vue%E9%A2%9C%E8%89%B2%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>http://yuliangyang1.github.io/2017/04/23/vue颜色选择器/</id>
    <published>2017-04-23T02:58:12.000Z</published>
    <updated>2017-04-23T03:39:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ANALYZE"><a href="#ANALYZE" class="headerlink" title="ANALYZE"></a>ANALYZE</h1><p>在学习vue的过程中小试牛刀，顺便总结在这个过程中的收获和遇到的坑。在学习过程中转换了原来使用angularjs的思维来进行编写代码，组件的概念深入人心，页面由组件构成。<br>在编写vueColorPicker的过程中，组件减少多外部的依赖，而是专注于完成指定的功能，这个功能独立单一，便于提炼为了让组件更加具有灵活性和可配置性，需要向外提供更规范的props。</p>
<ul>
<li><code>特点</code><ul>
<li>用以激活HTML5颜色面板</li>
<li>颜色显示小方块</li>
<li>颜色色盘</li>
<li>标准颜色</li>
<li>向外广播选择的颜色，方便父级元素的接收</li>
</ul>
</li>
</ul>
<h1 id="PICKER"><a href="#PICKER" class="headerlink" title="PICKER"></a>PICKER</h1><ul>
<li>git地址：<a href="https://github.com/yuliangyang1/vueColorPicker" title="vue-coloful-picker" target="_blank" rel="external">vue-coloful-picker</a></li>
</ul>
<blockquote>
<p>selectColor</p>
</blockquote>
<h2 id="SHOW"><a href="#SHOW" class="headerlink" title="SHOW"></a>SHOW</h2><p><img src="https://si.geilicdn.com/bj-app-1138109942-1492853419553-404563483_872_576.jpg" alt="Alt text"></p>
<p><img src="https://si.geilicdn.com/bj-app-1138109942-1492853441479-1742097411_424_616.jpg" alt="Alt text"></p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save vue-colorfule-picker</div></pre></td></tr></table></figure>
<h2 id="Import"><a href="#Import" class="headerlink" title="Import"></a>Import</h2><h3 id="Import-for-global"><a href="#Import-for-global" class="headerlink" title="Import for global"></a>Import for global</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import Vue from &apos;vue&apos;</div><div class="line">import colorPicker from &apos;vue-colorfule-picker&apos;</div><div class="line">Vue.use(colorPicker)</div></pre></td></tr></table></figure>
<h3 id="Import-for-local"><a href="#Import-for-local" class="headerlink" title="Import for local"></a>Import for local</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import colorPicker from &apos;vue-colorfule-picker&apos;</div><div class="line"> </div><div class="line">export default &#123;</div><div class="line">  components: &#123;</div><div class="line">    colorPicker,</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="CASE"><a href="#CASE" class="headerlink" title="CASE"></a>CASE</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;color-picker v-if=&quot;display&quot; :color=&quot;color&quot;  @change=&quot;changeColor&quot; :defaultColor=&apos;color&apos; :width=&quot;62&quot; :height=&quot;18&quot; :boxTop=&quot;18&quot; :boxLeft=&quot;-100&quot;&gt;&lt;/color-picker&gt;</div></pre></td></tr></table></figure>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>color</td>
<td>string</td>
<td>当前颜色值</td>
</tr>
<tr>
<td>defaultColor</td>
<td>String</td>
<td>默认颜色</td>
</tr>
<tr>
<td>disabled</td>
<td>Boolean</td>
<td>禁用状态</td>
</tr>
<tr>
<td>width</td>
<td>Number</td>
<td>方块选择器的宽度(px)</td>
</tr>
<tr>
<td>height</td>
<td>Number</td>
<td>方块选择器的高度(px)</td>
</tr>
<tr>
<td>boxTop</td>
<td>Number</td>
<td>选择筐顶部定位(px)</td>
</tr>
<tr>
<td>boxLeft</td>
<td>Number</td>
<td>选择框左边定位</td>
</tr>
</tbody>
</table>
<h3 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h3><table>
<thead>
<tr>
<th>事件名</th>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>change</td>
<td></td>
<td>通过emit的方式向父级元素广播颜色值</td>
</tr>
</tbody>
</table>
<h2 id="PUBLISH"><a href="#PUBLISH" class="headerlink" title="PUBLISH"></a>PUBLISH</h2><ol>
<li><p>规范的组件导出编写</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> colorPicker <span class="keyword">from</span> <span class="string">'../component/index.js'</span></div><div class="line"><span class="keyword">const</span> install = <span class="function"><span class="keyword">function</span>(<span class="params">Vue</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span>(install.installed) &#123;</div><div class="line">    <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line">  Vue.component(colorPicker.name, colorPicker)</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">window</span>.Vue) &#123;</div><div class="line">  install(<span class="built_in">window</span>.Vue)</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> version = <span class="string">'0.0.1'</span></div><div class="line"><span class="keyword">export</span> &#123;</div><div class="line">  install,</div><div class="line">  version,</div><div class="line">  colorPicker</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>umd方式，main入口引入umd打包的文件</p>
</li>
<li>vue源码形式，但是需要配合vue-loader来使用</li>
</ol>
]]></content>
    
    <summary type="html">
    
      vue学习写组件与发布
    
    </summary>
    
    
      <category term="javascript" scheme="http://yuliangyang1.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>js技术</title>
    <link href="http://yuliangyang1.github.io/2016/11/18/js%E6%8A%80%E6%9C%AF/"/>
    <id>http://yuliangyang1.github.io/2016/11/18/js技术/</id>
    <published>2016-11-18T15:30:39.000Z</published>
    <updated>2016-11-18T16:16:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="考察this"><a href="#考察this" class="headerlink" title="考察this"></a>考察this</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> length = <span class="number">10</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.length);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">length</span>: <span class="number">5</span>,</div><div class="line">    <span class="attr">method</span>: <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</div><div class="line">        fn();</div><div class="line">        <span class="built_in">arguments</span>[<span class="number">0</span>]();</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">obj.method(fn,<span class="number">1</span>);</div></pre></td></tr></table></figure>
<blockquote>
<p>输出：10 2<br>第一次输出10应该没有问题。我们知道取对象属于除了点操作符还可以用中括号，所以第二次执行时相当于arguments调用方法，this指向arguments，而这里传了两个参数，故输出arguments长度为2。</p>
</blockquote>
<hr>
<h2 id="var和函数的提前声明"><a href="#var和函数的提前声明" class="headerlink" title="var和函数的提前声明"></a>var和函数的提前声明</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> f = <span class="literal">true</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (f === <span class="literal">true</span>) &#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="number">10</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> b = <span class="number">20</span>;</div><div class="line">    c = <span class="number">30</span>;</div><div class="line">&#125;</div><div class="line">fn();</div><div class="line"><span class="built_in">console</span>.log(a);</div><div class="line"><span class="built_in">console</span>.log(b);</div><div class="line"><span class="built_in">console</span>.log(c);</div></pre></td></tr></table></figure>
<blockquote>
<p>输出：10 报错 30<br>这是个我犯了很久的错误，很长一段时间我都以为{…}内的新声明的变量是局部变量，后来我才发现function内的新声明的变量才是局部变量，而没有用var声明的变量在哪里都是全局变量。再次提醒切记只有function(){}内新声明的才能是局部变量，while{…}、if{…}、for(..)之内的都是全局变量（除非本身包含在function内）。</p>
</blockquote>
<hr>
<h2 id="变量隐式声明"><a href="#变量隐式声明" class="headerlink" title="变量隐式声明"></a>变量隐式声明</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="string">'a'</span><span class="keyword">in</span>  <span class="built_in">window</span>) &#123;</div><div class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</div><div class="line">&#125;</div><div class="line">alert(a);</div></pre></td></tr></table></figure>
<blockquote>
<p>答案：10<br>前面我说过function和var会提前声明，而其实{…}内的变量也会提前声明。于是代码还没执行前，a变量已经被声明，于是 ‘a’ in window 返回true，a被赋值。</p>
</blockquote>
<h2 id="给基本类型数据添加属性，不报错，但取值时是undefined"><a href="#给基本类型数据添加属性，不报错，但取值时是undefined" class="headerlink" title="给基本类型数据添加属性，不报错，但取值时是undefined"></a>给基本类型数据添加属性，不报错，但取值时是undefined</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</div><div class="line">a.pro= <span class="number">10</span>;</div><div class="line"><span class="built_in">console</span>.log(a.pro+ a);</div><div class="line"><span class="keyword">var</span> s = <span class="string">'hello'</span>;</div><div class="line">s.pro = <span class="string">'world'</span>;</div><div class="line"><span class="built_in">console</span>.log(s.pro+ s);</div></pre></td></tr></table></figure>
<blockquote>
<p>答案：NaN undefinedhello<br>给基本类型数据加属性不报错，但是引用的话返回undefined，10+undefined返回NaN，而undefined和string相加时转变成了字符串。</p>
</blockquote>
<h2 id="函数声明优于变量声明"><a href="#函数声明优于变量声明" class="headerlink" title="函数声明优于变量声明"></a>函数声明优于变量声明</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> fn);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"><span class="keyword">var</span> fn;</div></pre></td></tr></table></figure>
<blockquote>
<p>答案：function</p>
<h2 id="因为函数声明优于变量声明。我们知道在代码逐行执行前，函数声明和变量声明会提前进行，而函数声明又会优于变量声明，这里的优于可以理解为晚于变量声明后，如果函数名和变量名相同，函数声明就能覆盖变量声明。所以以上代码将函数声明和变量声明调换顺序还是一样结果。"><a href="#因为函数声明优于变量声明。我们知道在代码逐行执行前，函数声明和变量声明会提前进行，而函数声明又会优于变量声明，这里的优于可以理解为晚于变量声明后，如果函数名和变量名相同，函数声明就能覆盖变量声明。所以以上代码将函数声明和变量声明调换顺序还是一样结果。" class="headerlink" title="因为函数声明优于变量声明。我们知道在代码逐行执行前，函数声明和变量声明会提前进行，而函数声明又会优于变量声明，这里的优于可以理解为晚于变量声明后，如果函数名和变量名相同，函数声明就能覆盖变量声明。所以以上代码将函数声明和变量声明调换顺序还是一样结果。"></a>因为函数声明优于变量声明。我们知道在代码逐行执行前，函数声明和变量声明会提前进行，而函数声明又会优于变量声明，这里的优于可以理解为晚于变量声明后，如果函数名和变量名相同，函数声明就能覆盖变量声明。所以以上代码将函数声明和变量声明调换顺序还是一样结果。</h2></blockquote>
<h2 id="判断一个字符串中出现次数最多的字符，并统计次数"><a href="#判断一个字符串中出现次数最多的字符，并统计次数" class="headerlink" title="判断一个字符串中出现次数最多的字符，并统计次数"></a>判断一个字符串中出现次数最多的字符，并统计次数</h2><h3 id="hash-table方式"><a href="#hash-table方式" class="headerlink" title="hash table方式"></a>hash table方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="string">'aaabbbcccaaabbbaaa'</span>;</div><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> maxn = <span class="number">-1</span>;</div><div class="line"><span class="keyword">var</span> letter;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</div><div class="line">    <span class="keyword">if</span> (obj[s[i]]) &#123;</div><div class="line">        obj[s[i]]++;</div><div class="line">        <span class="keyword">if</span> (obj[s[i]] &gt; maxn) &#123;</div><div class="line">            maxn = obj[s[i]];</div><div class="line">            letter = s[i];</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        obj[s[i]] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (obj[s[i]] &gt; maxn) &#123;</div><div class="line">            maxn = obj[s[i]];</div><div class="line">            letter = s[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">alert(letter + <span class="string">':'</span> + maxn);</div></pre></td></tr></table></figure>
<h3 id="正则方式"><a href="#正则方式" class="headerlink" title="正则方式"></a>正则方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="string">'aaabbbcccaaabbbaaabbbbbbbbbb'</span>;</div><div class="line"><span class="keyword">var</span> a = s.split(<span class="string">''</span>);</div><div class="line">a.sort();</div><div class="line">s = a.join(<span class="string">''</span>);</div><div class="line"><span class="keyword">var</span> pattern = <span class="regexp">/(\w)\1*/g</span>;</div><div class="line"><span class="keyword">var</span> ans = s.match(pattern);</div><div class="line">ans.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> a.length &lt; b.length;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(ans[<span class="number">0</span>][<span class="number">0</span>]+ <span class="string">':'</span> + ans[<span class="number">0</span>].length);</div></pre></td></tr></table></figure>
<h2 id="经典闭包"><a href="#经典闭包" class="headerlink" title="经典闭包"></a>经典闭包</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line"> 实现一段脚本，使得点击对应链接alert出相应的编号 --&gt;</div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=utf-8"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'#'</span>&gt;</span>第一个链接 <span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">br</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'#'</span>&gt;</span>第二个链接 <span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">br</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'#'</span>&gt;</span>第三个链接 <span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">br</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'#'</span>&gt;</span> 第四个链接 <span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="dom污染法"><a href="#dom污染法" class="headerlink" title="dom污染法"></a>dom污染法</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;!--实现一段脚本，使得点击对应链接alert出相应的编号 --&gt;</div><div class="line">&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;</div><div class="line">&lt;body&gt;</div><div class="line">  &lt;a href='#'&gt;第一个链接 &lt;/a&gt; &lt;/br&gt;</div><div class="line">  &lt;a href='#'&gt;第二个链接 &lt;/a&gt; &lt;/br&gt;</div><div class="line">  &lt;a href='#'&gt;第三个链接 &lt;/a&gt; &lt;/br&gt;</div><div class="line">  &lt;a href='#'&gt;第四个链接 &lt;/a&gt; &lt;/br&gt;</div><div class="line">  &lt;script type="text/javascript"&gt;</div><div class="line">    var lis = document.links;</div><div class="line">    for(var i = 0, length = lis.length; i &lt; length; i++) &#123;</div><div class="line">      lis[i].index = i;</div><div class="line">      lis[i].onclick= function()</div><div class="line">        &#123;</div><div class="line">            alert(this.index);</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">  &lt;/script&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;!--实现一段脚本，使得点击对应链接alert出相应的编号 --&gt;</div><div class="line">&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;</div><div class="line">&lt;body&gt;</div><div class="line">  &lt;a href='#'&gt; 第一个链接 &lt;/a&gt; &lt;/br&gt;</div><div class="line">  &lt;a href='#'&gt;第二个链接 &lt;/a&gt; &lt;/br&gt;</div><div class="line">  &lt;a href='#'&gt;第三个链接 &lt;/a&gt; &lt;/br&gt;</div><div class="line">  &lt;a href='#'&gt;第四个链接 &lt;/a&gt; &lt;/br&gt;</div><div class="line">  &lt;script type="text/javascript"&gt;</div><div class="line">    var lis = document.links;</div><div class="line">    for(var i = 0, length = lis.length; i &lt; length; i++) &#123;</div><div class="line">      (function(i)</div><div class="line">        &#123;</div><div class="line">            lis[i].onclick= function()</div><div class="line">            &#123;</div><div class="line">                alert(i+ 1);</div><div class="line">            &#125;;</div><div class="line">      &#125;)(i);</div><div class="line">    &#125;</div><div class="line">  &lt;/script&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
<h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">JSClass</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.m_Text = <span class="string">'divisionelement'</span>;</div><div class="line">  <span class="keyword">this</span>.m_Element = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">  <span class="keyword">this</span>.m_Element.innerHTML = <span class="keyword">this</span>.m_Text;</div><div class="line">  <span class="keyword">this</span>.m_Element.addEventListener(<span class="string">'click'</span>,<span class="keyword">this</span>.func);</div><div class="line">  <span class="comment">//</span></div><div class="line"> <span class="keyword">this</span>.m_Element.onclick = <span class="keyword">this</span>.func;</div><div class="line">&#125;</div><div class="line"></div><div class="line">JSClass.prototype.Render = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">  <span class="built_in">document</span>.body.appendChild(<span class="keyword">this</span>.m_Element);</div><div class="line">&#125;</div><div class="line">JSClass.prototype.func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line"></div><div class="line">  alert(<span class="keyword">this</span>.m_Text);</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> jc = <span class="keyword">new</span></div><div class="line">JSClass();</div><div class="line">jc.Render(); </div><div class="line"><span class="comment">//add div</span></div><div class="line">jc.func(); </div><div class="line"><span class="comment">//输出 division element</span></div><div class="line"><span class="comment">//click添加的div元素division</span></div><div class="line"><span class="comment">//element会输出underfined，为什么？</span></div></pre></td></tr></table></figure>
<blockquote>
<p>答案：division element undefined<br>第一次输出很好理解，第二次的话仔细看，this其实已经指向了this.m_Element，因为是this.m_Element调用的addEventListener函数，所以内部的this全指向它了。可以试着加上一行代码this.m_Element.m_Text = ‘hello world’，就会alert出hello world了。</p>
</blockquote>
<h2 id="split"><a href="#split" class="headerlink" title="split"></a>split</h2><p>请编写一个JavaScript函数 parseQueryString，它的用途是把URL参数解析为一个对象，如： var url=”<a href="http://witmax.cn/index.php?key0=0&amp;key1=1&amp;key2=2" target="_blank" rel="external">http://witmax.cn/index.php?key0=0&amp;key1=1&amp;key2=2</a>“</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseQueryString</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">    <span class="keyword">var</span> a = url.split(<span class="string">'?'</span>);</div><div class="line">    <span class="keyword">if</span> (a === <span class="number">1</span>) <span class="keyword">return</span></div><div class="line">    obj;</div><div class="line">    <span class="keyword">var</span> b = a[<span class="number">1</span>].split(<span class="string">'&amp;'</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, length = b.length; i &lt; length; i++) &#123;</div><div class="line">        <span class="keyword">var</span> c = b[i].split(<span class="string">'='</span>);</div><div class="line">        obj[c[<span class="number">0</span>]] = c[<span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span></div><div class="line">    obj;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> url = <span class="string">'http://witmax.cn/index.php?key0=0&amp;key1=1&amp;key2=2'</span>;</div><div class="line"><span class="keyword">var</span> obj = parseQueryString(url);</div><div class="line"><span class="built_in">console</span>.log(obj.key0, obj.key1, obj.key2); <span class="comment">//</span></div><div class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      自己学习js的归纳总结
    
    </summary>
    
    
      <category term="javascript" scheme="http://yuliangyang1.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>双向绑定实现</title>
    <link href="http://yuliangyang1.github.io/2016/11/15/%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9ADemo/"/>
    <id>http://yuliangyang1.github.io/2016/11/15/双向绑定Demo/</id>
    <published>2016-11-15T14:28:54.000Z</published>
    <updated>2017-04-23T03:39:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h2><ul>
<li><code>值和UI双绑定</code><ul>
<li>各种数据相互依赖相互绑定</li>
<li>数据问题的源头难以被跟踪到</li>
</ul>
</li>
</ul>
<h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><ol>
<li>订阅发布模式。</li>
<li>数据劫持。</li>
</ol>
<h3 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h3><ol>
<li>实现⼀一个数据监听器<code>Observer</code></li>
<li>实现⼀一个指令解析器<code>Compile</code></li>
<li>实现一个<code>Watcher</code> </li>
<li><code>MVVM</code>⼊入⼜⼝口函数</li>
</ol>
<h3 id="Observer"><a href="#Observer" class="headerlink" title="Observer"></a>Observer</h3><p>用于定义属性，将属性定义在定义在<code>Object.defineProperty()</code>中这是实现双向绑定的核心函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">  Observer.prototype = &#123;</div><div class="line">    .....</div><div class="line">    defineReactive: <span class="function"><span class="keyword">function</span>(<span class="params">data, key, val</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> dep = <span class="keyword">new</span> Dep();</div><div class="line">        <span class="keyword">var</span> childObj = observe(val);</div><div class="line"></div><div class="line">        <span class="built_in">Object</span>.defineProperty(data, key, &#123;</div><div class="line">            <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="comment">// 可枚举，为了能再for循环中使用</span></div><div class="line">            configurable: <span class="literal">false</span>, <span class="comment">// 不能再被重复define</span></div><div class="line">            get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (Dep.target) &#123;</div><div class="line">                    dep.depend();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> val;</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">set</span>: <span class="function"><span class="keyword">function</span>(<span class="params">newVal</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (newVal === val) &#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                val = newVal;</div><div class="line">                <span class="comment">// 新的值是object的话，进行监听</span></div><div class="line">                childObj = observe(newVal);</div><div class="line">                <span class="comment">// 通知订阅者</span></div><div class="line">                dep.notify();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="Compile"><a href="#Compile" class="headerlink" title="Compile"></a>Compile</h3><p>用于编译指令，绑定监听者，识别关键的标签，比如<code>v-html</code>等<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">  Compile.prototype = &#123;</div><div class="line">    <span class="attr">node2Fragment</span>: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> fragment = <span class="built_in">document</span>.createDocumentFragment(),</div><div class="line">            child;</div><div class="line">        <span class="comment">// 将原生节点拷贝到fragment</span></div><div class="line">        <span class="keyword">while</span> (child = el.firstChild) &#123;</div><div class="line">            fragment.appendChild(child);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> fragment;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">init</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.compileElement(<span class="keyword">this</span>.$fragment);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">compileElement</span>: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> childNodes = el.childNodes,</div><div class="line">            me = <span class="keyword">this</span>;</div><div class="line">        [].slice.call(childNodes).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> text = node.textContent;</div><div class="line">            <span class="keyword">var</span> reg = <span class="regexp">/\&#123;\&#123;(.*)\&#125;\&#125;/</span>;</div><div class="line">            <span class="keyword">if</span> (me.isElementNode(node)) &#123;</div><div class="line">                me.compile(node);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (me.isTextNode(node) &amp;&amp; reg.test(text)) &#123;</div><div class="line">                me.compileText(node, <span class="built_in">RegExp</span>.$<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (node.childNodes &amp;&amp; node.childNodes.length) &#123;</div><div class="line">                me.compileElement(node);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">compile</span>: <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> nodeAttrs = node.attributes,</div><div class="line">            me = <span class="keyword">this</span>;</div><div class="line">        [].slice.call(nodeAttrs).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">attr</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> attrName = attr.name;</div><div class="line">            <span class="keyword">if</span> (me.isDirective(attrName)) &#123;</div><div class="line">                <span class="keyword">var</span> exp = attr.value;</div><div class="line">                <span class="keyword">var</span> dir = attrName.substring(<span class="number">2</span>);<span class="comment">//d-***</span></div><div class="line">                <span class="comment">// 事件指令</span></div><div class="line">                <span class="keyword">if</span> (me.isEventDirective(dir)) &#123;</div><div class="line">                    compileUtil.eventHandler(node, me.$vm, exp, dir);</div><div class="line">                    <span class="comment">// 普通指令</span></div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    compileUtil[dir] &amp;&amp; compileUtil[dir](node, me.$vm, exp);</div><div class="line">                &#125;</div><div class="line">                node.removeAttribute(attrName);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">compileText</span>: <span class="function"><span class="keyword">function</span>(<span class="params">node, exp</span>) </span>&#123;</div><div class="line">        compileUtil.text(node, <span class="keyword">this</span>.$vm, exp);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">isDirective</span>: <span class="function"><span class="keyword">function</span>(<span class="params">attr</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> attr.indexOf(<span class="string">'d-'</span>) == <span class="number">0</span>;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">isEventDirective</span>: <span class="function"><span class="keyword">function</span>(<span class="params">dir</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> dir.indexOf(<span class="string">'on'</span>) === <span class="number">0</span>;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">isElementNode</span>: <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> node.nodeType == <span class="number">1</span>;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">isTextNode</span>: <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> node.nodeType == <span class="number">3</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="Watcher"><a href="#Watcher" class="headerlink" title="Watcher"></a>Watcher</h3><p>监听者，放于监听器上，执行相应的回调函数，是<code>Observer</code>和<code>Compile</code>之间的桥梁<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Watcher</span>(<span class="params">vm, exp, cb</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.cb = cb;</div><div class="line">    <span class="keyword">this</span>.vm = vm;</div><div class="line">    <span class="keyword">this</span>.exp = exp;</div><div class="line">    <span class="keyword">this</span>.depIds = &#123;&#125;;</div><div class="line">    <span class="keyword">this</span>.value = <span class="keyword">this</span>.get();</div><div class="line">&#125;</div><div class="line">Watcher.prototype = &#123;</div><div class="line">    <span class="attr">update</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.run();</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">run</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> value = <span class="keyword">this</span>.get();<span class="comment">//触发observer中object.defineProperty中的get方法</span></div><div class="line">        <span class="keyword">var</span> oldVal = <span class="keyword">this</span>.value;</div><div class="line">        <span class="keyword">if</span> (value !== oldVal) &#123;</div><div class="line">            <span class="keyword">this</span>.value = value;</div><div class="line">            <span class="keyword">this</span>.cb.call(<span class="keyword">this</span>.vm, value, oldVal);</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">addDep</span>: <span class="function"><span class="keyword">function</span>(<span class="params">dep</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.depIds.hasOwnProperty(dep.id)) &#123;</div><div class="line">            dep.addSub(<span class="keyword">this</span>);</div><div class="line">            <span class="keyword">this</span>.depIds[dep.id] = dep;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        Dep.target = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">var</span> value = <span class="keyword">this</span>.getVMVal();<span class="comment">//默默的调用observe中的get方法</span></div><div class="line">        Dep.target = <span class="literal">null</span>;</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">getVMVal</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> exp = <span class="keyword">this</span>.exp.split(<span class="string">'.'</span>);</div><div class="line">        <span class="keyword">var</span> val = <span class="keyword">this</span>.vm._data;</div><div class="line">        exp.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">k</span>) </span>&#123;</div><div class="line">            val = val[k];<span class="comment">//触发observer中的get方法</span></div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">return</span> val;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>在进行angularjs进行脏数据查询，触发事件的时候进行事件的轮训，digest是轮训的中心方法。</li>
<li>vuejs是触发get和set方法来执行相应的监听数组。（针对性比较强）</li>
</ol>
<ul>
<li><a href="https://github.com/yuliangyang1/vm" target="_blank" rel="external">demo</a>  </li>
</ul>
]]></content>
    
    <summary type="html">
    
      对比angularjs和vuejs学习双向绑定
    
    </summary>
    
    
      <category term="javascript" scheme="http://yuliangyang1.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>编写高效的javascript</title>
    <link href="http://yuliangyang1.github.io/2016/08/29/%E7%BC%96%E5%86%99%E9%AB%98%E6%95%88%E7%9A%84javascript/"/>
    <id>http://yuliangyang1.github.io/2016/08/29/编写高效的javascript/</id>
    <published>2016-08-29T12:39:51.000Z</published>
    <updated>2016-11-16T13:25:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="读书笔记"><a href="#读书笔记" class="headerlink" title="读书笔记"></a>读书笔记</h1><ol>
<li>当执行javascript代码时，javascript引擎会创建一个执行上下文。执行上下文设定了代码执行时所处的环境。javascript引擎会在页面加载后创建一个全局执行上下文，然后每执行一个函数都会创建一个对应的执行上下文，最终建立一个执行上下文的堆栈，当前起作用的执行上下文在堆栈的最顶部。</li>
<li>使用局部变量：这样使得在使用变量的适合能够再堆栈的顶部找到变量，而不需要增加在作用域链中查找的时间。</li>
<li>使用with会加深作用域链，建议不使用。</li>
<li>try-catch也会加深作用域链，因为在catch块中会在作用域的顶部加了一个异常的对象，但是是在发生错误的时候才执行，所以它比with语句的影响要小。</li>
<li>数据在脚本中存储的位置直接影响脚本执行的总耗时，脚本中有四种地方可以存取数据<br>a.字面量值<br>b.变量<br>c.数组元素<br>d.对象属性</li>
<li>控制流，流控制是提升javascript性能最重要的一环，用switch语句简化了多重条件判断的结构，并且提升性能,避免使用for-in循环，它用来遍历javascript对象的可枚举属性。</li>
<li>字符串优化：字符串的连接应该避免使用加法运算符（+）来完成，然后我们使用javascript的Array对象有一个join方法，用来连接数组中的所有元素并且在元素之间插入指定的字符串。开发者把字符串添加到数组中然后通过join方法来连接字符串，这样就避免了使用加法运算符。</li>
<li>避免运行时间过长的脚本<br>a.过多的DOM操作。<br>b.过多的循环。<br>c.过多的递归。</li>
<li>使用定时器挂起，使用setTimeout函数传递需要执行的函数及延迟执行该函数的时间，延迟执行脚本的时间。</li>
</ol>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ol>
<li>管理作用域非常重要，因为存取非局部变量比局部变量耗时更多。</li>
<li>存储和读取数据的方式对脚本性能影响极大。</li>
<li>控制流也是影响脚本执行速度的一个重要因素。</li>
<li>在javascript中循环经常会成为性能瓶颈。</li>
<li>谨慎使用HTMLCollection对象。</li>
<li>常见的字符串操作可能会带来意料之外的性能问题。</li>
<li>浏览器会限制Javascript可以运行的最长时间，有些会执行语句的数量作为判断条件，有些则会控制javascript引擎执行的总时间。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      高效编写javascript的习惯
    
    </summary>
    
    
      <category term="javascript" scheme="http://yuliangyang1.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Elements调试的秘密</title>
    <link href="http://yuliangyang1.github.io/2016/08/28/Elements%E8%B0%83%E8%AF%95%E7%9A%84%E7%A7%98%E5%AF%86/"/>
    <id>http://yuliangyang1.github.io/2016/08/28/Elements调试的秘密/</id>
    <published>2016-08-28T00:44:13.000Z</published>
    <updated>2016-11-16T13:26:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最近在进行模板的开发，多chrome浏览器的elements元素使用的频率较多，对自己用到的功能模块和使用的技巧进行总结"><a href="#最近在进行模板的开发，多chrome浏览器的elements元素使用的频率较多，对自己用到的功能模块和使用的技巧进行总结" class="headerlink" title="最近在进行模板的开发，多chrome浏览器的elements元素使用的频率较多，对自己用到的功能模块和使用的技巧进行总结"></a>最近在进行模板的开发，多chrome浏览器的elements元素使用的频率较多，对自己用到的功能模块和使用的技巧进行总结</h1><h2 id="Elememts-画板"><a href="#Elememts-画板" class="headerlink" title="Elememts 画板"></a>Elememts 画板</h2><p>打开Element面板，可以查看所有DOM节点，包括CSS和JavaScript，如下图所示，左侧为DOM树，右侧为CSS样式。这个选项是所有Dom元素节点的样式具体展示。</p>
<p>1.鼠标选中节点，这时会发现Elements面板中的DOM树发生变化：<br>选中的的节点在DOM树中被精确定位（蓝色背景），可以看到被选中节点的DOM层次（红色方框），在面板右侧，是选中节点的CSS样式。</p>
<p>2.增加、删除和修改DOM节点<br>Edit text（编辑文本）：编辑该节点中的文本。也可以在文本处双击进行编辑。<br>Edit as HTML（编辑HTML）：编辑该节点及其子节点的所有HTML元素（包括节点中的文本）。<br>Copy as HTML（复制HTML）：复制该节点及其子节点的所有HTML元素（HTML文档）。<br>Copy XPath（复制XPath路径）：复制该节点的XPath路径，即DOM层次路径。例如，选中的节点的XPath路径为 /html/body/div/p 。<br>Delete node（删除节点）：删除该节点及其子节点的所有HTML元素。也可以使用 Backspace 和 Delete 键删除。<br>Inspect DOM properties（审查DOM属性）：在控制台中显示该节点的所有标准属性（如果有的话）。<br>Word wrap（自动换行）：HTML代码是否自动换行。</p>
<p>对 Inspect DOM properties（审查DOM属性）的说明：<br>为节点添加id属性。<br>会在控制台输出p#demo；再向节点添加class属性和name属性。<br>会在控制台输出p#demo.demo。<br>可见，控制台只会输出符合W3C标准的属性，不支持自定义属性。不过，实际开发中很少用到该功能。<br>另外，我们也可以通过拖动节点来改变节点的顺序，双击属性节点来改变它的值。</p>
<h2 id="查看css样式"><a href="#查看css样式" class="headerlink" title="查看css样式"></a>查看css样式</h2><p>CSS样式审查面板是一个非常有用的面板，实际开发中，有时候CSS样式表会非常复杂，甚至连我们自己都不知道当前节点应用了哪些样式。使用CSS样式审查面板，可以让我们清楚地知道当前节点使用了哪些样式，分别来自哪些文件，哪些样式是被覆盖的，哪些样式是最终样式，哪些样式是无效的，等等。<br>在CSS样式审查面板中，我们可以添加、删除和修改CSS样式。</p>
<p>子面板说明：</p>
<ol>
<li>Style（样式）：当前节点的样式；</li>
<li>Computed（计算）：查看当前节点经过计算后的样式以及盒模型数据；</li>
<li>Event Listeners（事件监听）：查看为当前节点绑定的事件和事件监听函数；</li>
<li>DOM Breakpoints（DOM断点）：查看为当前节点设置的DOM断点；</li>
<li>Properties（属性）：当前节点（对象）的所有属性。</li>
</ol>
<h3 id="【小技巧】使用键盘方向键改变数值"><a href="#【小技巧】使用键盘方向键改变数值" class="headerlink" title="【小技巧】使用键盘方向键改变数值"></a>【小技巧】使用键盘方向键改变数值</h3><p>查看节点的样式，选中 padding 的值，按下键盘方向键（&lt;- 和 -&gt;）数值会跟着改变，页面上节点的样式也立刻改变。实际开发中，会经常使用该方法来微调元素的外边距、内补白和大小等、，非常方便。</p>
<h3 id="【小技巧】颜色拾取器"><a href="#【小技巧】颜色拾取器" class="headerlink" title="【小技巧】颜色拾取器"></a>【小技巧】颜色拾取器</h3><p>查看节点的样式,选中 background-color 后边的小图标，会弹出颜色拾取器，能够很方便的改变背景颜色。</p>
<h3 id="【小技巧】新增样式类的使用"><a href="#【小技巧】新增样式类的使用" class="headerlink" title="【小技巧】新增样式类的使用"></a>【小技巧】新增样式类的使用</h3><p>在新增样式节点的时候，可以自己添加自己的伪类：比如before，after等处理。</p>
<h3 id="【小技巧】animate-的使用"><a href="#【小技巧】animate-的使用" class="headerlink" title="【小技巧】animate 的使用"></a>【小技巧】animate 的使用</h3><p>在进行动画效果的设计的时候，可以定位到不同的百分位进行动画效果样式的编写。</p>
]]></content>
    
    <summary type="html">
    
      chrome中对Elements的学习和研究
    
    </summary>
    
    
      <category term="tools" scheme="http://yuliangyang1.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>css兼容性的处理</title>
    <link href="http://yuliangyang1.github.io/2016/08/18/css%E5%85%BC%E5%AE%B9%E6%80%A7%E7%9A%84%E5%A4%84%E7%90%86/"/>
    <id>http://yuliangyang1.github.io/2016/08/18/css兼容性的处理/</id>
    <published>2016-08-18T12:31:24.000Z</published>
    <updated>2016-11-16T13:25:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在android4-0系列的手机上回出现层级上（z-index）的渲染效果的差异。"><a href="#在android4-0系列的手机上回出现层级上（z-index）的渲染效果的差异。" class="headerlink" title="在android4.0系列的手机上回出现层级上（z-index）的渲染效果的差异。"></a>在android4.0系列的手机上回出现层级上（z-index）的渲染效果的差异。</h2><p>原因：手机内核解析的差异，层级严格划分<br>解决办法：使用在：position :absolute的元素<br>     -webkit-transform:translateZ(0);</p>
<h2 id="android内核3-4-67版本的手机会出现绝对定位的位置问题"><a href="#android内核3-4-67版本的手机会出现绝对定位的位置问题" class="headerlink" title="android内核3.4.67版本的手机会出现绝对定位的位置问题"></a>android内核3.4.67版本的手机会出现绝对定位的位置问题</h2><p>原因：特殊属性，需要特殊处理<br>解决办法：需要多加定位坐标，或者加“-webkit-”前缀</p>
<h2 id="在三星9300（android4-0系列）手机进行列表适配的时候，div外层的height会崩塌，是因为内层存在绝对定位的元素。"><a href="#在三星9300（android4-0系列）手机进行列表适配的时候，div外层的height会崩塌，是因为内层存在绝对定位的元素。" class="headerlink" title="在三星9300（android4.0系列）手机进行列表适配的时候，div外层的height会崩塌，是因为内层存在绝对定位的元素。"></a>在三星9300（android4.0系列）手机进行列表适配的时候，div外层的height会崩塌，是因为内层存在绝对定位的元素。</h2><p>原因：父层元素会因为子元素的绝对定位而出现高度坍塌的显现。<br>解决办法：需要去掉外层div固定的高度，或者清除浮动。</p>
<h2 id="在三星9300（android4-0系列）的手机在itemList模块在样式中使用calc属性计算，会出现机器适配的问题。"><a href="#在三星9300（android4-0系列）的手机在itemList模块在样式中使用calc属性计算，会出现机器适配的问题。" class="headerlink" title="在三星9300（android4.0系列）的手机在itemList模块在样式中使用calc属性计算，会出现机器适配的问题。"></a>在三星9300（android4.0系列）的手机在itemList模块在样式中使用calc属性计算，会出现机器适配的问题。</h2><p>原因：属性不兼容。<br>解决办法：calc属性，android4.4以上设备，改换成百分百的适配方式。</p>
]]></content>
    
    <summary type="html">
    
      css处理工作中的兼容性问题
    
    </summary>
    
    
      <category term="css" scheme="http://yuliangyang1.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yuliangyang1.github.io/2016/08/17/hello-world/"/>
    <id>http://yuliangyang1.github.io/2016/08/17/hello-world/</id>
    <published>2016-08-17T14:35:32.000Z</published>
    <updated>2016-11-16T13:27:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      Hello World
    
    </summary>
    
    
  </entry>
  
</feed>
